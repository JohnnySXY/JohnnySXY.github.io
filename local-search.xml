<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AWS数据传输费用怎么算？</title>
    <link href="/2023/04/20/AWS%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E8%B4%B9%E7%94%A8%E6%80%8E%E4%B9%88%E7%AE%97%EF%BC%9F/"/>
    <url>/2023/04/20/AWS%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E8%B4%B9%E7%94%A8%E6%80%8E%E4%B9%88%E7%AE%97%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p><strong>AWS的数据传输类型大致有如下三类</strong>：</p><p>与Internet之间的数据传输<br>AWS内部跨区域的数据传输<br>AWS内部同一区域的数据传输<br>本文将以ap-southeast-2区域中的EC2和S3为例。</p><p>#<strong>与Internet之间的数据传输费用计算</strong><br>所有从Internet到AWS的流量是免费的，所有从AWS到Internet的流量是收费的。即对AWS服务而言，上行收费，下行免费。</p><p>针对上行流量，AWS根据不同的使用量采用不同的费率，下表中展示的是ap-southeast-2区域从AWS到Internet的数据传输费率。</p><p>Rate tiersPricing<br>Up to 1 GB &#x2F; Month$0.00 per GB<br>Next 9.999 TB &#x2F; Month$0.114 per GB<br>Next 40 TB &#x2F; Month$0.098 per GB<br>Next 100 TB &#x2F; Month$0.094 per GB<br>Greater than 150 TB &#x2F; Month$0.092 per GB<br>那么问题来了，在这一个月中S3和EC2均产生了1GB到Internet的上行流量，AWS应该收我多少钱？$0? 不是的，会产生 $0.114 费用。</p><p>##<strong>为啥？</strong></p><p>AWS会根据从AWS服务传输到Internet的数据总量计算数据传输费率。具体而言，AWS会将从Amazon EC2, Amazon S3, Amazon Glacier, Amazon RDS, Amazon Redshift, Amazon SES, Amazon SimpleDB, Amazon SQS, Amazon SNS, Amazon DynamoDB, AWS Storage Gateway, 和 Amazon CloudWatch Logs到Internet的流量进行合并计算数据传输费率。</p><p>比如，我们只使用了EC2和S3服务，在本月我们已经使用了10TB，那么接下来EC2或者S3到Internet的费用到会按照$0.098&#x2F;GB收费，知道使用到下一个费率标准。</p><p>简单说，下行免费，上行收费，费率算总量。</p><p><strong>跨区域的数据传输费用计算</strong><br>不同区域对跨区域数据传输的费率是不一样的。对于上行的数据传输会按照费率收取费用，对于下行的数据传输不收费。</p><p>比如现在有2台EC2实例A和B，A在悉尼(ap-southeast-2)，B在新加坡(ap-southeast-1)。这两台实例之间如何收取数据传输费用？</p><p>已知从悉尼ap-southeast-2到其他区域的数据传输费用为 $0.14&#x2F;GB，从新加坡ap-southeast-1到其他区域的数据传输费用为 $0.09&#x2F;GB</p><p>则从A给B传输1GB的数据，A需要付出数据传输费用 $0.14，B不需要付费。从B给A传输1GB的数据，A不需要付费，B需要付费 $0.09。</p><p>下行免费，上行收费，费率分区域。</p><p><strong>到CloudFront的数据传输费用计算</strong><br>无论EC2还是S3到CloudFront的数据传输都是免费的。</p><p><strong>同一区域内的数据传输费用计算</strong><br><strong>S3</strong><br>S3 bucket之间在同一区域进行数据传输不收费。</p><p>S3和其他AWS服务在同一区域进行数据传输不收费。比如EC2和S3之间传输数据是免费的。</p><p><strong>EC2</strong><br>Amazon EC2，Amazon RDS，Amazon Redshift，Amazon DynamoDB Accelerator（DAX），Amazon ElastiCach 和 Elastic Network Interfaces进行跨可用区或使用VPC对等连接传输数据，上下行都需要收费，$0.01&#x2F;GB<br>比如在可用区A中有1台EC2 EC2-A，在可用区B中有1台EC EC2-B。当EC2-A向EC2-B传输1G数据，EC2-A需要支付 $0.01 上行数据传输费用，EC2-B需要支付 $0.01 下行数据传输费用。总共需要 $0.02 数据传输费用。</p><p>同一个区域内，使用公网IPv4或者弹性IPv4地址传输数据，上下行都需要收费，$0.01&#x2F;GB。<br>比如在可用区A中有两台EC2 EC2-A和EC2-B，它们之间使用公网IP传输数据是需要收费的，假如EC2-A向EC2-B发送1GB的数据，EC2-A需要支付 $0.01 上行数据传输费用，EC2-B需要支付 $0.01 下行数据传输费用。总共需要 $0.02 数据传输费用。</p><p>Q: 跨可用区使用Public IP传输数据如何收费？<br>跨区域使用Public IP或者EIP传输数据只会收一次费用。<br>比如在可用区A中有1台EC2 EC2-A，在可用区B中有1台EC EC2-B。当EC2-A通过EIP向EC2-B传输1G数据，EC2-A需要支付 $0.01 上行数据传输费用，EC2-B需要支付 $0.01 下行数据传输费用。总共需要 $0.02 数据传输费用。</p><p>同一个区域内，使用IPv6跨VPC传输数据，上下行都需要收费，$0.01&#x2F;GB。</p><p>同一个可用区内Amazon EC2, Amazon RDS, Amazon Redshift, Amazon ElastiCache instances 和 Elastic Network Interfaces 之间传输数据免费。如果使用VPC对等连接，则需要按照VPC对等连接的费率收费。</p><p>比如在可用区A中有两台EC2 EC2-A和EC2-B，它们之间使用私有IP传输数据是免费的。</p><p>在同一区域中内 Amazon S3、Amazon Glacier、Amazon DynamoDB、Amazon SES、Amazon SQS、Amazon Kinesis、Amazon ECR、Amazon SNS、Amazon SimpleDB 和 Amazon EC2 实例之间传输数据是免费的。通过PrivateLink终端节点访问的AWS服务将产生标准PrivateLink费用。</p><p>使用私有 IP 地址从 Amazon Classic Elastic Load Balancer 和 Amazon Application Elastic Load Balancer与EC2 实例之间传输数据是免费的。</p><p><strong>总结</strong><br><strong>EC2</strong><br><img src="https://github.com/JohnnySXY/JohnnySXY.github.io/blob/master/2023/04/20/AWS%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E8%B4%B9%E7%94%A8%E6%80%8E%E4%B9%88%E7%AE%97%EF%BC%9F/ec2.png?raw=true"></p><p><strong>S3</strong><br><img src="https://github.com/JohnnySXY/JohnnySXY.github.io/blob/master/2023/04/20/AWS%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E8%B4%B9%E7%94%A8%E6%80%8E%E4%B9%88%E7%AE%97%EF%BC%9F/s3.png?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>CLOUD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AWS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于如何在hexo博客上发布和删除博文</title>
    <link href="/2023/04/20/Hexo-Release-OR-Delete-Article/"/>
    <url>/2023/04/20/Hexo-Release-OR-Delete-Article/</url>
    
    <content type="html"><![CDATA[<p><span  style="color: #519D9E; ">关于如何在hexo博客上发布和删除博文</span></p><p>创建文章<br>进入博客目录，在 &#x2F;source&#x2F;_posts 文件夹下直接建立一个.md文件</p><p>hexo new “这里填入文章的标题”</p><p>.md文件注意使用带有makedown语法的编辑器打开，对文章进行编辑，你可以在Hexo-&gt;Source-&gt;_post目录下看到你新创建的那个文章，还有一个配套的文件夹，里面放这边博文的图片资源</p><p>文章标题，日期，标签，分类</p><p>title: 文章标题<br>date: 2015-11-13 15:40:25<br>tags: 标签<br>categories: 分类<br>文章插入图片需要用到一个Hexo的插件，首先cd到hexo的根目录下</p><p>npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> –save</p><p>然后把图片放入对应文章的配套文件夹下</p><p>如果要进行代码书写，代码样式可自行下载</p><p>发布新建文章<br>文章写好后，直接在git bash中执行以下命令即可直接发布文章</p><p>hexo d -g</p><p>如果发布的时候出现错误</p><p>ERROR Deployer not found: git</p><p>执行</p><p>npm install hexo-deployer-git –save</p><p>删除文章<br>删除文章的过程一样也很简单，先删除本地文件，然后通过生成和部署命令进而将远程仓库中的文件也一并删除。具体来说，以最开始默认形成的helloworld.md这篇文章为例。</p><p>首先进入到source &#x2F; _post 文件夹中，找到helloworld.md文件，在本地直接执行删除。然后依次执行</p><p>hexo d -g</p><p>再去主页查看你就会发现你的博客上面已经空空如也了，这就是如何删除文章的方法。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos查看CPU核数命令</title>
    <link href="/2023/04/20/Centos-CPU-Check-Info/"/>
    <url>/2023/04/20/Centos-CPU-Check-Info/</url>
    
    <content type="html"><![CDATA[<h1 id="总核数-x3D-物理CPU个数-X-每颗物理CPU的核数"><a href="#总核数-x3D-物理CPU个数-X-每颗物理CPU的核数" class="headerlink" title="总核数 &#x3D; 物理CPU个数 X 每颗物理CPU的核数"></a>总核数 &#x3D; 物理CPU个数 X 每颗物理CPU的核数</h1><h1 id="总逻辑CPU数-x3D-物理CPU个数-X-每颗物理CPU的核数-X-超线程数"><a href="#总逻辑CPU数-x3D-物理CPU个数-X-每颗物理CPU的核数-X-超线程数" class="headerlink" title="总逻辑CPU数 &#x3D; 物理CPU个数 X 每颗物理CPU的核数 X 超线程数"></a>总逻辑CPU数 &#x3D; 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</h1><h1 id="查看物理CPU个数"><a href="#查看物理CPU个数" class="headerlink" title="查看物理CPU个数"></a>查看物理CPU个数</h1><p>cat &#x2F;proc&#x2F;cpuinfo| grep “physical id”| sort| uniq| wc -l</p><h1 id="查看每个物理CPU中core的个数-即核数"><a href="#查看每个物理CPU中core的个数-即核数" class="headerlink" title="查看每个物理CPU中core的个数(即核数)"></a>查看每个物理CPU中core的个数(即核数)</h1><p>cat &#x2F;proc&#x2F;cpuinfo| grep “cpu cores”| uniq</p><h1 id="查看逻辑CPU的个数"><a href="#查看逻辑CPU的个数" class="headerlink" title="查看逻辑CPU的个数"></a>查看逻辑CPU的个数</h1><p>cat &#x2F;proc&#x2F;cpuinfo| grep “processor”| wc -l</p>]]></content>
    
    
    <categories>
      
      <category>SYSTEM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CENTOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
